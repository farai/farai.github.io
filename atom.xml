<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Developer's Blog]]></title>
  <link href="http://farai.github.io/atom.xml" rel="self"/>
  <link href="http://farai.github.io/"/>
  <updated>2015-02-16T17:45:03+00:00</updated>
  <id>http://farai.github.io/</id>
  <author>
    <name><![CDATA[Farai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript NaN for New Date Object in IE &amp; Safari]]></title>
    <link href="http://farai.github.io/blog/2015/02/16/javascript-nan-for-new-date-object-in-ie-and-safari/"/>
    <updated>2015-02-16T12:44:42+00:00</updated>
    <id>http://farai.github.io/blog/2015/02/16/javascript-nan-for-new-date-object-in-ie-and-safari</id>
    <content type="html"><![CDATA[<p>Recently I came across an issue during some cross browser testing of a change I had made which highlighted an interesting issue. It appeared Internet Explorer and Safari seem to handle date strings differently when instantiating new date objects using javascript&rsquo;s <code>new Date()</code>.</p>

<p>The date string I was trying to use to instantiate a new date object looked like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'2015-02-16T12:44:42+0000' 
</span></code></pre></td></tr></table></div></figure>


<p>The above format is the basic ISO 8601 notation which includes the timezone offset via the value shown after &ldquo;+&rdquo;.</p>

<p>To the best of my knowledge this format is the most widely used across the web but when trying trying to instaniate a new date object like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dateTime</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="s1">&#39;2015-02-16T12:44:42+0000&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resulted in the NaN message being rendered everywhere I was trying to show a date in IE and Safari but other browsers seemed to handle the string accordingly without any issue.</p>

<p>Following closer inspection of my input datetime string and a few minutes of playing around with my trusty browser console and javascript&rsquo;s <code>Date()</code>, it turns out the IE and Safari will only accept the the extended date time notation which looks like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;2015-02-16T12:44:42+00:00&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference between the extended notation and the basic notation I had been trying to use was just the inclusion of the colon in the timezone offset value. This left me intrigued as to whether the other browsers which had been working fine with the basic notation would be able to handle the creation of date objects with input strings in extended notation and turns out they could.</p>

<p>Having found out that using the extended notation is always going to be the safer option for cross browser compatibility, I found the solution below to do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dateTimeString</span> <span class="o">=</span> <span class="s1">&#39;2015-02-16T12:44:42+0000&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//add colon to timezone offet</span>
</span><span class='line'><span class="nx">dateTime</span> <span class="o">=</span> <span class="nx">dateTimeString</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([+\-]\d\d)(\d\d)$/</span><span class="p">,</span> <span class="s2">&quot;$1:$2&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Should you come across the same issue, hopefully you find this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qualities of Clean Code: Part1 - Naming of Things]]></title>
    <link href="http://farai.github.io/blog/2015/02/11/qualities-of-clean-code-naming-of-things/"/>
    <updated>2015-02-11T16:44:23+00:00</updated>
    <id>http://farai.github.io/blog/2015/02/11/qualities-of-clean-code-naming-of-things</id>
    <content type="html"><![CDATA[<p>Over the course of the months to come, Im going to be focusing on the topic of clean code and noting all the qualities that constitute clean code through reading and re-factoring code, discussions with fellow developers, and drawing from insight gained through Robert C Martin&rsquo;s book, <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code &ndash; A handbook of agile software craftsmenship</a>.
As a reminder to myself of the main attributes to always keep in mind and to share with anyone interested in becoming better developers through improving their own code quality; I will be writing a series of posts detailing the main attributes of clean code and their importance.<br/>
Firstly, what is the definition of clean code? My interpretation of clean code is code that is:</p>

<p>   1.. Simple and easy to understand</p>

<p>   2.. Can easily be modified/enhanced by other developers</p>

<p>   3.. Testable</p>

<p>To kick off the series of posts, I&rsquo;m going to start with highlighting the importance of how you name things.
Naming is one of the hardest things in software development. Considering how we come to easily understanding some logic is partly hinged on how things were named; it is important we name things properly. By sticking to the following points as rule of thumb we are never going to be far off the mark of attaining clean code.</p>

<h2>Be Descriptive</h2>

<p>There is nothing more frustrating than realising time spent while trying to work out what some code does through dumping variables or stepping through with debuggers before you can actually make your code change all because of some cryptic class, function and variable names. The names you choose should be able to quickly highlight purpose and shed light on how an item is being used in a particular context. Avoid single letter variable names and ensure that the names you have chosen are pronounceable . Keep in mind that being descriptive doesn&rsquo;t mean use long names. If the name cannot be noted at a glance then it&rsquo;s most likely too long.
Consider the following piece of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getBlockedItems</span><span class="p">(</span><span class="nv">$dataSet</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$dataSet</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;blocked&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$data</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$dataSet</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its not complicated having taken a close at the code to understand what it is doing but there is totally no context to what is going on here. Had things been named in a more descriptive manner you would have clearly understood its purpose in half the time. So how could the code have been written in a clearer more descriptive way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getBlockedAccounts</span><span class="p">(</span><span class="nv">$accounts</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$blockedAccounts</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$accounts</span> <span class="k">as</span> <span class="nv">$accountNumber</span> <span class="o">=&gt;</span> <span class="nv">$accountDetails</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$accountDetails</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;blocked&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$blockedAccounts</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$accounts</span><span class="p">[</span><span class="nv">$accountNumber</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$blockedAccounts</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With just a few descriptive names, at a glance you can now quickly work out the purpose of the logic and notice what a difference that makes.</p>

<h2>Be Consistent</h2>

<p>Try be as consistent as possible in your use of the names. Ensure your choice of names for concepts is clearly distinguishable from other procceses.
Its confusing to have fetch, get, retrieve littered all over the code in an inconsistent manner. With inconsistency it would make it difficult to quickly work out which function will return data with the attributes you are after.</p>

<h2>Avoid abbreviation</h2>

<p>Abbreviations are dangerous. Personal interpretation of abbreviations can lead to misunderstanding. You should really avoid using these unless its really unavoidable because extremely long names as mentioned before can also be bad when people are trying to read your code. I would say the only case it might be acceptable is when referring to domain specific phrases.</p>

<h2>Avoid Hungarian notation</h2>

<p>If still using Hungarian notion you should have stopped a long time ago. Its a dated concept which doesn’t provide any real benefit these days and most of the time is misused. Attempting to use it will most likely only make it harder to understand and follow what your code is doing.
To this date a good article still worthwhile reading is Joel Spolsky&rsquo;s <a href="http://www.joelonsoftware.com/articles/Wrong.html">&ldquo;Making Wrong Code Look Wrong&rdquo;</a>. His article goes into more detail about the origins of the notation and how the abuse and misunderstanding of it has created issues.</p>

<h2>Avoid misleading names</h2>

<p>Avoid using names that in the domain of our language choice and field of computer science could mean something else. Using such names could lead to bad assumptions and false conclusion.</p>

<h2><em>Parting words</em></h2>

<p>As general rule of thumb, take time to think about your names and if you need to add comments to explain the purpose of a variable or function internal in your code, you&rsquo;ve probably already messed up. In that scenario revist your code and reconsider your implementation to see if it can be further simplified in such a way the code expresses itself and the author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client Side Dependency Management With Bower]]></title>
    <link href="http://farai.github.io/blog/2014/06/12/client-side-dependency-management-with-bower/"/>
    <updated>2014-06-12T19:25:26+01:00</updated>
    <id>http://farai.github.io/blog/2014/06/12/client-side-dependency-management-with-bower</id>
    <content type="html"><![CDATA[<p>As part of a conquest to improve my general front-end skills, I decided to address the issue of dependency management
and decided to familiarise myself with <a href="http://bower.io/">Bower</a>.</p>

<p>Bower is a dependency management solution that helps you overcome the stress of front-end dependency management. It will help you
manage your web assets like Javascript, HTML and CSS.</p>

<p>In greater detail and as defined by the Bower team:</p>

<blockquote><p>Bower is a package manager for the web. It offers a generic, unopinionated solution to the problem
of front-end package management, while exposing the package dependency model via an API that can be consumed by a more opinionated build stack.
There are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.</p></blockquote>

<p>In this post I detail the installation process, issues encountered, how to use it and anything else I found worth remembering.</p>

<h2>Getting Started&hellip;</h2>

<p>Bower has a few dependencies of its own that need to be satisfied before you can use it. To get started ensure you have installed the following:</p>

<ol>
<li><a href="http://nodejs.org/">Node.js</a></li>
<li>Npm &ndash; comes bundled with Node.js installation</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ol>


<h2>Installation</h2>

<p>Install Bower globally using npm with <code>-g</code> flag by running the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g bower
</span></code></pre></td></tr></table></div></figure>


<p>My first attempt of running the above command failed with the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm ERR! Error: EACCES, mkdir '/usr/local/lib/node_modules/bower'
</span><span class='line'>npm ERR!  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/bower']
</span><span class='line'>npm ERR!   errno: 3,
</span><span class='line'>npm ERR!   code: 'EACCES',
</span><span class='line'>npm ERR!   path: '/usr/local/lib/node_modules/bower',
</span><span class='line'>npm ERR!   fstream_type: 'Directory',
</span><span class='line'>npm ERR!   fstream_path: '/usr/local/lib/node_modules/bower',
</span><span class='line'>npm ERR!   fstream_class: 'DirWriter',
</span><span class='line'>npm ERR!   fstream_stack:
</span><span class='line'>npm ERR!    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
</span><span class='line'>npm ERR!      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
</span><span class='line'>npm ERR!      'Object.oncomplete (fs.js:107:15)' ] }
</span><span class='line'>npm ERR!
</span><span class='line'>npm ERR! Please try running this command again as root/Administrator.
</span></code></pre></td></tr></table></div></figure>


<p>From looking at the error I could tell this was the result of a permissions issue. I attempted to resolve by running the install
command as sudo to no avail. If like me, you run into the same issue; you can resolve by changing the ownership of the
<strong>/usr/local</strong> directory to your $USER as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo chown -R $USER /usr/local
</span></code></pre></td></tr></table></div></figure>


<p>After running the above; if you re-run the install command, it should now succeed with no problem. You can now verify that bower has successfully
installed by running the following command in your terminal which should then return usage instructions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower
</span></code></pre></td></tr></table></div></figure>


<h2>Lets Start Using Bower</h2>

<h3>Searching For Packages</h3>

<p>Locating packages can be done in two ways. You can either find available packages using the <a href="http://bower.io/search/">component directory</a> or searching using bower&rsquo;s
command line <code>search</code> feature.</p>

<p>For example to search for the popular <a href="http://getbootstrap.com/">bootstrap</a> front-end framework, you can simply formulate your command line query like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower search bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>The query will return a large result set in the format <strong>&lt;package_name>&lt;git_end_point></strong>. You can use the package name or the git endpoint to install the package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Search results:
</span><span class='line'>
</span><span class='line'>    bootstrap git://github.com/twbs/bootstrap.git
</span><span class='line'>    angular-bootstrap git://github.com/angular-ui/bootstrap-bower.git
</span><span class='line'>    sass-bootstrap git://github.com/jlong/sass-bootstrap.git
</span><span class='line'>    bootstrap-sass git://github.com/jlong/sass-twitter-bootstrap
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Packages via Command Line</h3>

<p>Having chosen a package to install, you can use the <code>install</code> command with the name of the package you wish to install as the argument.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install &lt;package&gt;
</span></code></pre></td></tr></table></div></figure>


<p>You can also choose to install a specific version of a package by using the hash symbol between the package name and the required version number.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower install &lt;package_name&gt;#&lt;version_number&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Packages Using bower.json file</h3>

<p>Using the bower.json to install packages provides advantages such as eliminating the need to commit your applications dependencies to version control since
all the info will be in the file and will allow you and other project collaborators to easily reproduce an identical software stack.</p>

<p>You can create the file in your application root directory or run <code>bower init</code> command which will generate a template file for you to list your dependencies.</p>

<p>The example below shows a bower.json file which defines some information on the project and a list of its dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "sample-app",
</span><span class='line'>  "version": "0.0.1",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "sass-bootstrap": "~3.0.0",
</span><span class='line'>    "jasmine": "~2.0"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once you have defined all you project dependencies, you can install them all at once by executing the <code>bower install</code> command.</p>

<h2>Other useful commands</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower update
</span></code></pre></td></tr></table></div></figure>


<p>Will update all your dependencies specified in your bower.json file while abiding by the version restrictions you&rsquo;ve specified.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower update &lt;package_name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Will update the specified package name</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bower uninstall &lt;package_name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>
Will uninstall the specified package</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Octopress Blog With Github Pages]]></title>
    <link href="http://farai.github.io/blog/2014/05/11/setup-octopress-blog-with-github-pages/"/>
    <updated>2014-05-11T10:48:30+01:00</updated>
    <id>http://farai.github.io/blog/2014/05/11/setup-octopress-blog-with-github-pages</id>
    <content type="html"><![CDATA[<p>Having decided to start blogging again after a minor hiatus I&rsquo;ve decided to start a new blog using <a href="http://octopress.org/">Octopress</a> as the framework of choice. It uses Jekyll, the blog aware static site generator that powers  Github Pages.</p>

<p>This write up details the process of getting setup and any gotchas I encountered for my own future reference and for anyone that might find this useful.</p>

<p>The setup detailed in this writeup was carried out on my Mac Book Pro, running OS X Mavericks and a zsh terminal.</p>

<h2>Prerequisite:</h2>

<ol>
<li>Ensure you have <a href="http://git-scm.com/">git</a> installed. If you have <a href="https://developer.apple.com/xcode/downloads/">Xcode tools</a> then you should already have git available on your machine.</li>
<li>Install <a href="https://github.com/wayneeseguin/rvm">rvm</a> or <a href="https://github.com/sstephenson/rbenv">rbenv</a> with ruby version 1.9.3. Despite Octopress docs suggesting ruby versions greater than 1.9.3 would suffice, I had issues trying to use v2.0 as some of the Octopress dependencies didnt seem to support it.</li>
<li>Install <a href="http://bundler.io/">Bundler</a>,  the Ruby dependency manager.</li>
</ol>


<h2>Setup:</h2>

<p>Obtain Octopress by cloning it onto your local machine and navigate into the cloned folder.</p>

<p>In my instance I cloned it into a directory called &ldquo;blog&rdquo; as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git blog
</span><span class='line'>cd blog
</span></code></pre></td></tr></table></div></figure>


<p>Install all the required dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Install the default Octopress theme:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake install
</span></code></pre></td></tr></table></div></figure>


<h1>Deployment</h1>

<p>For easy publishing and to get free hosting for my blog I decided to use <a href="https://pages.github.com/">Github pages</a> which also provides me with the domain <code>http://farai.github.io</code>.</p>

<p>To get the hosting setup, log into your <a href="https://github.com/">Github</a> account and <a href="https://github.com/repositories/new">create a github repository</a> with a name in the format of <code>username.github.io</code> where username is your Github user name. Ensure the name of your repository is in the correct format so that Github pages will be able to locate and serve your site as it will serve everything from the master branch of this repo like the web root directory on a server.</p>

<p>As the generated content will be served from the master branch of your repo you will want to work off a separate branch when making changes to your repo. Octopress provides a rake task that helps you setup a good work flow so you can easily manage and deploy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>You will notice after running the <code>setup_github_pages</code> task a new branch will have been created for you called &ldquo;source&rdquo; and a folder named &ldquo;<em>deploy&rdquo;. When making changes to your blog you will now be working off the source branch and every time you perform a deployment, the changes you&rsquo;ve made will be copied into the </em>deploy folder then pushed upto into the master branch by another set of deployment tasks.</p>

<p>To perform a deployment run the tasks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>At this stage your site should now be deployed. The pending task would be to ensure you save site changes under source control by committing your changes on the &ldquo;source&rdquo; branch as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'your desired commit message'
</span><span class='line'>$ git push origin source
</span></code></pre></td></tr></table></div></figure>


<p>Remember to always commit changes made on your source branch.</p>

<p>If you now go ahead and visit <code>http://yourgithubusername.github.io</code> you should now be able to see your live site.</p>

<h1>Custom Theme</h1>

<p>Upon completion of the setup, I didn&rsquo;t quite like the default Octopress theme and if you share the same feeling, the following process details how I added a custom theme.</p>

<p>I settled on the <a href="http://github.com/alexgaribay/octoflat">Octoflat</a> theme by Alex Garibay and you can choose from a variety of other nice <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd party Octopress themes</a>.</p>

<p>To install the custom theme I ran the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd blog
</span><span class='line'>$ git clone https://github.com/alexgaribay/octoflat .themes/octoflat
</span><span class='line'>$ rake "install[octoflat]"
</span><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>Note that I quoted the arguments to rake on the install command as opposed to running <code>rake install['octoflat']</code> as most instructions suggest. This was intentional and due to the fact that instructions found in the docs are Bash oriented and I&rsquo;m using a Zsh terminal which had me getting the error <code>zsh: no matches found: install[octoflat]</code>.</p>

<h1>Creating my first post</h1>

<p>Octopress also provides a task to help you create your posts preloaded with metadata and according to Jekyll&rsquo;s naming conventions.</p>

<p>Creating my first post was as easy as running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake "new_post[Setup Octopress blog with Github Pages]"
</span></code></pre></td></tr></table></div></figure>


<p>And thats all that was to setting up my new Octopress blog.</p>
]]></content>
  </entry>
  
</feed>
